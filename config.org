#+title: My literate Doom Emacs Configuration
#+author: Marcus

This is my personal Doom Emacs configuration. From this org-file all the necessary configuration files are generated.

This file is written in [[https://leanpub.com/lit-config][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:init.el][init.el]], [[file:packages.el][packages.el]] and [[file:config.el][config.el]] for the generated files. The elisp files are automatically generated (tangled) when this document is saved. To reload, use =doom sync= in a terminal or =SPC-h-r-r= in emacs.

* Table of Contents :TOC_4:
- [[#references][References]]
- [[#setup-and-install][Setup and Install]]
  - [[#install-brew][Install Brew]]
  - [[#check-script-and-install-if-ok][Check script and install if ok]]
  - [[#install-terminal-apps][Install terminal Apps]]
  - [[#install-gui-apps][Install GUI Apps]]
  - [[#install-emacs][Install Emacs]]
    - [[#install-doom-emacs][Install Doom Emacs]]
    - [[#get-this-configuration][Get this configuration]]
  - [[#raycast-edits][Raycast Edits]]
- [[#file-headers][File Headers]]
  - [[#initel][=init.el=]]
  - [[#configel][=config.el=]]
  - [[#packagesel][=packages.el=]]
- [[#doom-modules][Doom Modules]]
- [[#personal-information][Personal information]]
- [[#ui-settings][UI Settings]]
  - [[#theme][Theme]]
    - [[#spacemacs-theme][Spacemacs-theme]]
  - [[#initial-buffer-choice][Initial buffer choice]]
  - [[#line-numbers][Line Numbers]]
  - [[#parentheses][Parentheses]]
  - [[#pulse][Pulse]]
  - [[#window-management][Window Management]]
    - [[#winner][Winner]]
    - [[#window][Window]]
- [[#misc-settings][Misc Settings]]
  - [[#auto-revert][Auto revert]]
  - [[#whitespace][Whitespace]]
- [[#key-bindings][Key Bindings]]
  - [[#insert-structure-template-block][Insert structure template block]]
  - [[#rename-m-from-leaderkey-to-org][Rename 'm' from <leaderkey> to 'Org']]
- [[#org][Org]]
  - [[#org-settings][Org Settings]]
  - [[#org-capture][Org Capture]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-roam][Org Roam]]
- [[#dired][Dired]]
- [[#ibuffer][IBuffer]]
- [[#programming][Programming]]
  - [[#get-all-packages][Get all packages]]
  - [[#programming-language][Programming Language]]
    - [[#rust][Rust]]
      - [[#rustic][Rustic]]
- [[#ai][AI]]
  - [[#code-completion][Code Completion]]
- [[#internet][Internet]]
  - [[#browser][Browser]]

* References
This configuration relly on other people's files and from other resources. My top go to places when looking for insperation and solutions are:

- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
- [[https://www.masteringemacs.org/][Mastering Emacs]]
- [[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org][Doom Emacs Getting Started Guide]]
- [[https://protesilaos.com/][Protesilaos Stavrou]]
- [[https://www.pygopar.com/][Pygopar]]
- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]

* Setup and Install
I'm currently using an Apple MacBook Pro or a Dell XPS. If you are on other hardware you need to adapt this configuration for your needs.

** Install Brew
Download install script for brew.
#+begin_src bash :tangle no
curl https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh > install.sh
#+end_src
** Check script and install if ok
#+begin_src bash :tangle no
# check install script
vim install.sh

# install brew
/bin/bash -c install.sh
#+end_src
** Install terminal Apps
#+begin_src bash :tangle no
brew install wget \
    git gh \
    zsh-completions \
    tree \
    ripgrep fd \
    coreutils \
    btop \
    cmake \
    ccls \
    sbcl \
    llvm \
    lld \
    bear \
    clisp \
    java11 \
    isort \
    python-setuptools \
    pipenv \
    pytest \
    markdown \
    languagetool \
    shellcheck \
    node \
    starship
#+end_src
** Install GUI Apps
#+begin_src bash :tangle no
brew install --cask raycast \
    google-chrome firefox brave-browser tor-browser \
    iterm2 \
    rectangle \
    visual-studio-code \
    vlc \
    calibre figma \
    imageoptim \
    maccy \
    sequel-ace \
    bitwarden \
    font-hack-nerd-font \
    font-fira-code-nerd-font \
    font-iosevka \
    proton-pass \
    prusaslicer
#+end_src
** Install Emacs
#+begin_src bash :tangle no
brew tap railwaycat/emacsport
brew install emacs-plus --with-mailutils --with-imagemagick --with-native-comp --with-modern-papirus-icon
osascript -e 'tell application "Finder" to make alias file to posix file "/opt/homebrew/opt/emacs-plus@29/Emacs.app" at posix file "/Applications" with properties {name:"Emacs.app"}'
#+end_src
*** Install Doom Emacs
#+begin_src bash :tangle no
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
#+end_src
*** Get this configuration
#+begin_src bash :tangle no
git clone https://github.com/marcus-38/doom ~/.config/doom
#+end_src
Next steps:
- Start Emacs and load config.org
- =SPC-.= or =C-x C-f= to load file
- load *~/.config/doom/config.org*
- generate the configuration files by running =C-c C-v t= to tangle
- load the new configuration =SPC h r r= or =~/.config/emacs/bin/doom sync= in a terminal
** Raycast Edits
- Change ⌘-Space to open raycast instead of spotlight
- Set ⌘-e to open Emacs
- Set ⌘-Return to open iterm2

* File Headers
The file header sets [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical-binding]] to true. I also try to warn other people not to use my configuration as is.

Here be dragons...

** =init.el=
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;;; Commentary:
;; This is my personal Emacs configuration. The file is tangled from a
;; literate org document where I try to document what each piece is for.
;; If you found my configurations you are free to use as you please, but
;; please read the whole thing before you do. I regulary commit my
;; configuration even though it is not working. Yes, I know, you shouldn't
;; do that but you have been warned.

;; Here be dragons

;; Code:
#+end_src
** =config.el=
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;; Commentary:
;; This is my personal Emacs configuration. The file is tangled from a
;; literate org document where I try to document what each piece is for.
;; If you found my configurations you are free to use as you please, but
;; please read the whole thing before you do. I regulary commit my
;; configuration even though it is not working. Yes, I know, you shouldn't
;; do that but you have been warned.

;; Here be dragons

;; Code:
#+end_src
** =packages.el=
#+begin_src emacs-lisp :tangle packages.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;; Commentary:
;; This is my personal Emacs configuration. The file is tangled from a
;; literate org document where I try to document what each piece is for.
;; If you found my configurations you are free to use as you please, but
;; please read the whole thing before you do. I regulary commit my
;; configuration even though it is not working. Yes, I know, you shouldn't
;; do that but you have been warned.

;; Here be dragons

;; Code:
#+end_src

* Doom Modules
This controls which Doom modules are enabled and what order they load in. Remember to run =doom sync= (=SPC-h-r-r=) after modifying it.
#+begin_src emacs-lisp :tangle init.el
;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company           ; the ultimate code completion backend
       (corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;; doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       eww               ; the internet is gross
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;; hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pretty)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader

       :config
       literate
       (default +bindings +smartparens))

#+end_src

* Personal information
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Marcus"
       user-mail-address "marcus@r38.se")
#+end_src

* UI Settings
** Theme
To change theme use =SPC-h-t= and choose an installed theme.
#+begin_src emacs-lisp :tangle config.el
;;(setq doom-theme 'doom-one)
(setq doom-theme 'doom-nord-aurora)
#+end_src
*** Spacemacs-theme
Spacemacs theme is an Emacs color theme that started as a theme for [[https://github.com/syl20bnr/spacemacs][spcaemacs]]. The theme comes with dark and light variants and it should work well with 256 color terminals.
#+begin_src emacs-lisp :tangle packages.el
(package! spacemacs-theme)
#+end_src

** Initial buffer choice
#+begin_src emacs-lisp :tangle config.el
(setq initial-buffer-choice 'eshell)
#+end_src
** Line Numbers
Line number can be toogled by =SPC-t-l=. Possible types are:
- =t=: regular line numbers
- ='relative=: relative line numbers
- =nil=: no line numbers
#+begin_src emacs-lisp :tangle config.el
(setq display-line-number-type t)
#+end_src
** Parentheses
#+begin_src emacs-lisp :tangle config.el
(setq blink-matching-paren 'jump
      show-paren-style 'mixed
      blink-matching-delay 1)
#+end_src
** Pulse
Pulse the current line where the point is.
#+begin_src emacs-lisp :tangle packages.el
(package! pulse)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! pulse
  :init
  (defun pulse-line (&rest _)
    "Pulse the current line"
    (pulse-momentary-highlight-one-line (point)))
  (dolist (command '(scroll-up-command
                     scroll-down-command
                     windmove-left
                     windmove-right
                     windmove-up
                     windmove-down
                     move-to-window-line-top-bottom
                     recenter-top-bottom
                     other-window))
    (advice-add command :after #'pulse-line)))
#+end_src
** Window Management
*** Winner
#+begin_src emacs-lisp :tangle packages.el
(package! winner)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! winner
  :hook after-init
  :commands (winner-undo winner-redo)
  :custom
  (winner-boring-buffers '("*Completions*" "*Help*" "*Apropos*" "*Buffer List*" "*info*" "*Compile-Log*")))

#+end_src
*** Window
#+begin_src emacs-lisp :tangle packages.el
;(package! window)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! window
  :defer
  :custom
  (recenter-positions '(middle top bottom)))
#+end_src
* Misc Settings
** Auto revert
Auto refresh files when changed from disk.
#+begin_src emacs-lisp :tangle packages.el
(package! autorevert)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! autorevert
  :custom
  (global-auto-revert-mode))
#+end_src
** Whitespace
#+begin_src emacs-lisp :tangle packages.el
(package! whitespace)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! whitespace
  :hook (before-save . whitespace-cleanup))
#+end_src
* Key Bindings
My own keybindings that I like.
** Insert structure template block

|-------------+--------------------------------------------|
| Keystroke   | Inserts                                    |
|-------------+--------------------------------------------|
| SPC i b a   | #+begin_export ascii                       |
| SPC i b c   | #+begin_center                             |
| SPC i b C   | #+begin_comment                            |
| SPC i b e e | #+begin_example                            |
| SPC i b e l | #+begin_src emacs-lisp                     |
| SPC i b e c | #+begin_src emacs-lisp :tangle config.el   |
| SPC i b e p | #+begin_src emacs-lisp :tangle packages.el |
| SPC i b E   | #+begin_export                             |
| SPC i b h   | #+begin_export html                        |
| SPC i b l   | #+begin_export latex                       |
| SPC i b q   | #+begin_quote                              |
| SPC i b s s | #+begin_src                                |
| SPC i b s h | #+begin_src sh                             |
| SPC i b v   | #+begin_verse                              |
|-------------+--------------------------------------------|

#+begin_src emacs-lisp :tangle config.el
(map! :leader
      :desc "Structure block"
      "i b" #'org-insert-structure-template)
(map! :leader
      :desc "comment line"
      "-" #'comment-line)

(setq select-enable-clipboard nil)
(map! "S-C-c" #'clipboard-kill-ring-save)
(map! "S-C-v" #'clipboard-yank)
#+end_src
** Rename 'm' from <leaderkey> to 'Org'
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      :desc "Org"
      "m" nil)
#+end_src
* Org
** Org Settings
These are my personal org settings.
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "~/Org/"
      my-agenda-dirs '("~/.config/doom" "~/Org") ; add more directories to look for agenda entries
      org-agenda-files (mapcan (lambda (x) (directory-files-recursively
                                            (expand-file-name x org-directory)
                                            "\.org$"))
                               my-agenda-dirs))
#+end_src

** DONE Org Capture
** Org Tempo
Org Tempo set up a few structured templates. With just a few keystrokes, it is possible to insert empty structural blocks.

#+begin_src emacs-lisp :tangle config.el
(use-package! org-tempo
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("ec" . "src emacs-lisp :tangle config.el"))
  (add-to-list 'org-structure-template-alist '("ep" . "src emacs-lisp :tangle packages.el"))
  (add-to-list 'org-structure-template-alist '("p" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  )
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(use-package! org-agenda
  :bind (("C-c a" . org-agenda))
  :hook ((org-agenda-finalize . hl-line-mode)
         (org-agenda-finalize . org-agenda-entry-text-mode))
  :custom
  (org-agenda-current-time-string (if (and (display-graphic-p)
                                           (char-displayable-p ?←)
                                           (char-displayable-p ?-))
                                      "⬅️ now"
                                    "now - - - - - - - - - - - - - - - - - - - - - - - - -"))
  (org-agenda-timegrid-use-ampm nil)
  (org-agenda-tags-column 0)
  (org-agenda-window-setup 'only-window)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-log-mode-items '(closed clock state))
  (org-agenda-time-grid '((daily today require-timed)
                          (600 800 1000 1200 1400 1600 1800 2000)
                          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-start-on-weedkay nil)
  )
#+end_src
** TODO Org Roam
DEADLINE: <2025-02-25 Tue>

* Dired
#+begin_src emacs-lisp :tangle packages.el
(package! all-the-icons-dired)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! dired
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . hl-line-mode))
  :custom
  (dired-do-revert-buffer t)
  (dired-auto-revert-buffer t)
  (delete-by-moving-to-trash t)
  (dired-mouse-drag-files t)
  (dired-dwim-target t)
  (dired-listing-switches "-AlhoF --group-directories-first"))
(use-package! all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode)
  :custom
  (all-the-icons-dired-monochrome nil))
(use-package! files
  :custom
  (insert-directory-program "gls"))
#+end_src
* IBuffer
My IBuffer settings.
#+begin_src emacs-lisp :tangle packages.el
(package! all-the-icons-ibuffer)
(package! ibuffer-vc)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! all-the-icons-ibuffer
  :custom
  (all-the-icons-ibuffer-formats
   ´((mark modified read-only locked vc-satus-mini
           " " ,(if all-the-icons-ibuffer-icon
                    ´(icon 2 2 :left :elide)
                    "")
           ,(if all-the-icons-ibuffer-icon
                (propertize " " 'display ´(space :align-to 8))
              "")
           (name 18 18 :left :elide)
           " " (size-h 9 -1 :right)
           " " (mode+ 16 16 :right)
           " " (vc-status 16 16 :left)
           " " vc-relative-file)
     (mark " " (name 16 -1) " " filename)))
  :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

(use-package! ibuffer-vc
  :hook (ibuffer . (lambda ()
                     (ibuffer-vc-set-filter-groups-by-vc-root)
                     (unless (eq ibuffer-sorting-mode 'alphabetic)
                       (ibuffer-do-sort-by-vc-status)
                       )
                     )))
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (mode . org-mode))
               ("magit" (name ."^magit"))
               ("planner" (or (name . "^\\*Calendar\\*$")
                              (name . "^\\*Org Agenda\\*")))
               ("emacs" (or (name . "^\\*scratch\\*$")
                            (name . "^\\*Messages\\*$")))))))
(add-hook 'ibuffer-mode-hook (lambda () (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

* Programming
Turn emacs into a nice IDE for programming.
** Get all packages
#+begin_src emacs-lisp :tangle packages.el
(package! lsp-mode)
(package! lsp-ui)
(package! consult-lsp)
(package! dap-mode)
(package! ccls)
(package! cmake-mode)
(package! google-c-style)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((prog-mode . lsp-deferred)
         (lsp-mode . lsp-enable-which-key-integration))
  :custom
  (lsp-enable-folding nil)
  (lsp-enable-links nil)
  (lsp-enable-snippet nil)
  (lsp-keymap-prefix "C-c ;")
  (lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1" xdg-data)))
  (read-process-output-max (* 1024 1024)))

(use-package! lsp-ui
  :hook (lsp-mode . lsp-ui-mode))

(use-package! consult-lsp
  :commands (consult-lsp-diagnostics consult-lsp-symbols))

(use-package! dap-mode
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))

(use-package! ccls
  :after projectile
  :hook ((c-mode c++-mode objc-mode cuda-mode) . lsp-deferred)
  :custom
  (ccls-args nil)
  (ccls-executable (executable-find "ccls"))
  (projectile-project-root-files-top-down-recurring
   (append '("complie_commands.json" ".ccls")
           projectile-project-root-files-top-down-recurring))
  :config
  (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))

(use-package! google-c-style
  :hook (((c-mode c++-mode ) . google-set-c-style)
         (c-mode-common . google-make-newline-indent)))

(use-package! cmake-mode
  :hook (cmake-mode . lsp-deferred)
  :mode ("CMakeLists\\.txt'" "\\.cmake\\'"))

#+end_src
** Programming Language
*** Rust
**** Rustic
Rustic is based on [[https://github.com/rust-lang/rust-mode][rust-mode]] and provides additional features:
- cargo popup
- multiline error parsing
- translation of ANSI control sequences through xterm-color
- async org babel
- automatic LSP configuration with eglot or lsp-mode
- etc.
***** Install package
Code is tangled into packages.el.
#+begin_src emacs-lisp :tangle packages.el
(package! rustic)
#+end_src
***** Rustic configuration
Configuration code is tangled into config.el.
#+begin_src emacs-lisp :tangle config.el
(use-package! rustic
  :ensure
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status)))
:config
;;
(setq rustic-format-on-save t)
(add-hook 'rustic-mode-hook 'my/rustic-mode-hook)

(defun my/rustic-mode-hook ()
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))

#+end_src

* AI
** TODO Code Completion
* Internet
** Browser
#+begin_src emacs-lisp :tangle packages.el
(package! shrface)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! eww
  :init (add-hook 'eww-after-render-hook #'shrface-mode))

(use-package! shrface
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings)
  (setq shrface-href-versatile t))
#+end_src
